"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞."""

import logging

from aiogram import Router
from aiogram.enums import ChatAction
from aiogram.filters import Command
from aiogram.types import Message as TelegramMessage

from src.config import Config
from src.llm.protocols import LLMClientProtocol
from src.storage.models import Message
from src.storage.protocols import DatabaseProtocol

logger = logging.getLogger(__name__)


class BotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ —Å dependency injection.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç DI —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
    –í—Å–µ handlers - –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ self.
    """

    def __init__(
        self,
        llm_client: LLMClientProtocol,
        database: DatabaseProtocol,
        config: Config,
    ):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è handlers —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.

        Args:
            llm_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM
            database: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.llm_client = llm_client
        self.database = database
        self.config = config
        self.router = Router()
        self._register_handlers()
        logger.info("BotHandlers initialized with dependencies")

    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers –≤ router."""
        self.router.message(Command("start"))(self.cmd_start)
        self.router.message()(self.handle_message)

    async def cmd_start(self, message: TelegramMessage) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if message.from_user:
            logger.info(f"Received /start command from user_id={message.from_user.id}")

        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç <b>Systech AIDD</b>.\n\n"
            "–ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
        )

    async def handle_message(self, message: TelegramMessage) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not message.text or not message.from_user:
            return

        user_id = message.from_user.id
        chat_id = message.chat.id

        logger.info(
            f"Received message from user_id={user_id}, "
            f"chat_id={chat_id}, length={len(message.text)}"
        )

        try:
            # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = Message(
                user_id=user_id, chat_id=chat_id, role="user", content=message.text
            )
            await self.database.save_message(user_message)

            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            history = await self.database.get_history(
                chat_id=chat_id, user_id=user_id, limit=self.config.max_history_messages
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            if message.bot:
                await message.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

            # 3. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            response = await self.llm_client.get_response(
                messages=history, system_prompt=self.config.system_prompt
            )

            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            assistant_message = Message(
                user_id=user_id, chat_id=chat_id, role="assistant", content=response
            )
            await self.database.save_message(assistant_message)

            # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(response)
            logger.info(f"Response sent to user_id={user_id}")

        except Exception as e:
            logger.error(f"Error processing message: {e}")
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
