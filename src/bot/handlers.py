"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞."""
import logging
from aiogram import Router
from aiogram.types import Message as TelegramMessage
from aiogram.enums import ChatAction
from aiogram.filters import Command

from src.config import Config
from src.llm.client import LLMClient
from src.storage.database import Database
from src.storage.models import Message

logger = logging.getLogger(__name__)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
llm_client: LLMClient | None = None
database: Database | None = None
config: Config | None = None


def setup_handlers(client: LLMClient, db: Database, cfg: Config) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ handlers —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.
    
    Args:
        client: LLM –∫–ª–∏–µ–Ω—Ç
        db: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        cfg: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    """
    global llm_client, database, config
    llm_client = client
    database = db
    config = cfg
    logger.info("Handlers configured with dependencies")


@router.message(Command("start"))
async def cmd_start(message: TelegramMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"Received /start command from user_id={message.from_user.id}")
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç <b>Systech AIDD</b>.\n\n"
        "–ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    )


@router.message()
async def handle_message(message: TelegramMessage) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not message.text or not llm_client or not database or not config:
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    logger.info(
        f"Received message from user_id={user_id}, "
        f"chat_id={chat_id}, length={len(message.text)}"
    )
    
    try:
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = Message(
            user_id=user_id,
            chat_id=chat_id,
            role="user",
            content=message.text
        )
        await database.save_message(user_message)
        
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        history = await database.get_history(
            chat_id=chat_id,
            user_id=user_id,
            limit=config.max_history_messages
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await message.bot.send_chat_action(
            chat_id=chat_id,
            action=ChatAction.TYPING
        )
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        response = await llm_client.get_response(
            messages=history,
            system_prompt=config.system_prompt
        )
        
        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant_message = Message(
            user_id=user_id,
            chat_id=chat_id,
            role="assistant",
            content=response
        )
        await database.save_message(assistant_message)
        
        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)
        logger.info(f"Response sent to user_id={user_id}")
        
    except Exception as e:
        logger.error(f"Error processing message: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

