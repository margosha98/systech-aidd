# Правила для Cursor AI

## Основные принципы
- Отвечай на русском языке
- Не выдавай высокоуровневые ответы, твоя задача дать конкретное решение, применимое к проекту
- Не давай детальные пояснения, но описывай, зачем ты вносишь данные изменения
- Перед тем, как внести изменения, опиши общий план реализации по пунктам и только после приступай к реализации
- Учитывай линтеры при формировании кода

## Архитектурные принципы
- **KISS (Keep It Simple, Stupid)** - максимальная простота решений
- **1 класс = 1 файл** - чистая структура, легкая навигация
- **Явное лучше неявного** - никакой магии, все очевидно
- **Fail fast** - ранняя валидация, быстрое падение при ошибках
- **Async-first** - используй async/await для всех IO операций
- **Type hints** - типизация обязательна для всех функций и методов
- **MVP-подход** - реализуй только необходимый минимум

## Что избегать (NO оверинжиниринг)
- ❌ Абстрактные фабрики и сложные паттерны
- ❌ Микросервисы и избыточная модульность
- ❌ Сложные системы кеширования
- ❌ Преждевременная оптимизация

## Конфигурация LLM
- **Модель LLM не должна быть на "авто"** - всегда используй явно указанную модель из конфигурации
- Текущая модель: openai/gpt-3.5-turbo (через Openrouter)
- Конфигурация модели в .env файле через переменную OPENROUTER_MODEL

## Выполнение команд
- **Отключи автовыполнение команд** - всегда спрашивай подтверждение перед выполнением команд в терминале
- Показывай команды для ручного выполнения пользователем
- Не запускай команды автоматически без явного разрешения

## Технологический стек
- Python 3.11+
- uv - управление зависимостями и виртуальным окружением
- aiogram - Telegram Bot API (polling mode)
- openai - клиент для работы с LLM через Openrouter
- sqlite3 - встроенная БД для истории диалогов
- pydantic-settings - типизированная конфигурация
- pytest + pytest-asyncio - тестирование

## Структура проекта
```
systech-aidd/
├── src/
│   ├── bot/          # Обработчики команд и запуск бота
│   ├── llm/          # Работа с OpenAI/Openrouter
│   ├── storage/      # Работа с SQLite
│   ├── config.py     # Конфигурация (pydantic-settings)
│   └── main.py       # Точка входа
├── tests/            # Тесты
├── docs/             # Документация
└── .env              # Конфигурация (не в git)
```

## Слоистая архитектура
- Bot Layer → LLM Layer → Storage Layer
- Зависимости идут вниз, каждый слой знает только о следующем

